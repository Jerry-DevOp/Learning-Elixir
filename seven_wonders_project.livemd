# Seven wonders Project

## Struct

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule SevenWonders do
  defstruct name: "", country: ""

  @type t :: %SevenWonders{
          name: String.t(),
          country: String.t()
        }
  # ================================================================
  @spec all :: [t()]
  def all() do
    [
      %SevenWonders{name: "The Great Pyramid of Giza", country: "Egypt"},
      %SevenWonders{name: "The Great Wall Of China", country: "China"},
      %SevenWonders{name: "Petra", country: "Jordan"},
      %SevenWonders{name: "Christ the Redeemer", country: "Brazil"},
      %SevenWonders{name: "Machu Picchu", country: "Peru"},
      %SevenWonders{name: "Chichen Itza", country: "Mexico"},
      %SevenWonders{name: "Colosseum", country: "Italy"},
      %SevenWonders{name: "Taj Mahal", country: "India"}
    ]
  end

  # ================================================================
  @spec print_names([t()]) :: :ok
  def print_names(wonders) do
    wonders
    |> Enum.each(fn %{name: name} -> IO.puts(name) end)
  end

  @spec filter_country([t()], String.t()) :: [t()]
  def filter_country(wonders, country) do
    wonders
    |> Enum.filter(fn %{country: country_name} -> country_name == country end)
  end

  @spec in_countries_start_with_i([t()]) :: [t()]
  def in_countries_start_with_i(wonders) do
    wonders
    |> Enum.filter(fn %{country: country} -> String.starts_with?(country, "I") end)
  end

  def sort_country_by_length(wonders) do
    wonders
    |> Enum.sort(fn x, y -> String.length(x.country) < String.length(y.country) end)
  end

  def name_country_list(wonders) do
    wonders
    |> Enum.reduce([], fn wonder, acc -> [[wonder.name, wonder.country] | acc] end)
  end

  def country_name_keyword_lis(wonders) do
    wonders
    |> Enum.reduce([], fn wonder, acc -> [{String.to_atom(wonder.name), wonder.country} | acc] end)
  end

  # ===============================For=================================================================

  def all_names(wonders) do
    for %{name: name} <- wonders, do: name
  end
end

all_seven = SevenWonders.all()
```

## Print name function

```elixir
SevenWonders.print_names(all_seven)
```

```elixir
SevenWonders.filter_country(all_seven, "China")
```

```elixir
SevenWonders.filter_country(all_seven, "Italy")
```

```elixir
SevenWonders.in_countries_start_with_i(all_seven)
```

```elixir
SevenWonders.sort_country_by_length(all_seven)
```

```elixir
SevenWonders.name_country_list(all_seven)
```

```elixir
SevenWonders.country_name_keyword_lis(all_seven)
```

```elixir
SevenWonders.all_names(all_seven)
```

## Expense

```elixir
defmodule Expenses do
  defstruct(
    title: "",
    date: nil,
    amount: 0,
    store: ""
  )

  @type p :: %Expenses{
          title: String.p(),
          date: Date.p() | nil,
          amount: number(),
          store: String.p()
        }
  def sample do
    [
      %Expenses{title: "Grocery", date: ~D[2023-07-18], amount: 499.99, store: "Checkers"},
      %Expenses{title: "Jersey", date: ~D[2023-07-17], amount: 149.99, store: "Jet"},
      %Expenses{title: "Laptop Stand", date: ~D[2023-07-16], amount: 119.99, store: "Game"},
      %Expenses{title: "Grasshoper", date: ~D[2023-07-15], amount: 499.99, store: "Superbalist"}
    ]
  end

  @spec total([p]) :: number()
  def total(expenses) do
    expenses
    |> Enum.reduce(0, fn expense, acc -> expense.amount + acc end)
  end

  @spec sort_by_date([p()]) :: [p()]
  def sort_by_date(expenses) do
    expenses
    |> Enum.sort_by(& &1.date)
  end
end
```

```elixir
Expenses.sort_by_date(Expenses.sample())
```

```elixir
Expenses.total(Expenses.sample())
```
