# Enum.chunk & Enum.chunk_every

## Enum.chunk

Enum.chunk is a depracted function in elixir 1.15.2

This means the function is available in the current version of elixir but it is not recommended to use it 
(https://www.baeldung.com/cs/deprecated-vs-obsolete#:~:text=The%20term%20deprecated%20refers%20to,or%20updated%20with%20newer%20versions.).

Enum.chunk takes two arguments the enumerable and the count and it returns a nested list and discard the outlier automatically.
Enum.chunk(Enumrable, Count)

```elixir
Enum.chunk([1, 2, 3, 4, 5], 2)
```

## Enum.chunk_every

Enum.chunk_every is a function in elixir that takes a list and creates nested list.

Enum.chunk_every has added functionality compared to Enum.chunk
Enum.chunk_every has 4 arguments an enumrable, count, step and leftover.

If the step is not mentioned it automatically gets assigned the value of count.

If the leftover is not discarded it will be saved in the nested list.
(https://hexdocs.pm/elixir/1.13/Enum.html#chunk_every/4)

Lets look at an example

```elixir
Enum.chunk_every([1, 2, 3, 4, 5], 2)
```

The step argument , allows you to specify the number of indexes to skip when you are creating your nested list.
let us assume the step is 1

```elixir
Enum.chunk([1, 2, 3, 4, 5], 2, 1)
```

The leftover argument allows you to remove the outlier from the nested list or keep it

```elixir
Enum.chunk_every([1, 2, 3, 4, 5], 2, 2, :discard)
```
